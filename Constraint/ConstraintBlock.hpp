/**
 * @file ConstraintBlock.hpp
 * @author Wen Yan (wenyan4work@gmail.com)
 * @brief
 * @version 0.1
 * @date 2019-11-04
 *
 * @copyright Copyright (c) 2019
 *
 */
#ifndef CONSTRAINTBLOCK_HPP_
#define CONSTRAINTBLOCK_HPP_

#include "Util/EigenDef.hpp"
#include "Util/GeoCommon.h"
#include "Util/IOHelper.hpp"

#include <algorithm>
#include <cmath>
#include <type_traits>
#include <vector>

/**
 * @brief constraint information block
 *
 * Each block stores the information for one constraint.
 * The blocks are collected by ConstraintCollector and then used to construct the sparse fcTrans matrix
 * 
 * Constraints can (currently) have the following types:
 *   id=0: collision              | 3 constrained DOF | prevents penetration and enforces tangency of colliding surfaces
 *   id=1: no penetration         | 1 constrained DOF | prevents penetration
 *   id=2: hookean spring         | 3 constrained DOF | resists relative translational motion between two points
 *   id=3: angular hookean spring | 3 constrained DOF | resists relative rotational motion between two vectors
 *   id=4: ball and socket        | 3 constrained DOF | prevents the separation of two points
 * 
 */
struct ConstraintBlock {
  public:
    int id = -1;                          ///< identifier specifying the type of constraint this is 
    double delta = 0;                     ///< current value of the constraint function
    double gamma = 0;                     ///< constraint Lagrange multiplier, could be an initial guess
    int gidI = GEO_INVALID_INDEX;         ///< unique global ID of particle I
    int gidJ = GEO_INVALID_INDEX;         ///< unique global ID of particle J
    int globalIndexI = GEO_INVALID_INDEX; ///< global index of particle I
    int globalIndexJ = GEO_INVALID_INDEX; ///< global index of particle J
    bool oneSide = false;                 ///< flag for one side constraint. body J does not appear in mobility matrix
    double invKappa = 0;                  ///< diagonal term generated by the constraint constant. For id=1&2, this is the inverse spring constant and for id=0&3 this is zero 
    double unscaledForceComI[3] = {0, 0, 0};
    double unscaledForceComJ[3] = {0, 0, 0}; ///< com force induced by this constraint for unit constraint Lagrange multiplier gamma
    double unscaledTorqueComI[3] = {0, 0, 0};
    double unscaledTorqueComJ[3] = {0, 0, 0}; ///< com torque induced by this constraint for unit constraint Lagrange multiplier gamma
    double labI[3] = {0, 0, 0};
    double labJ[3] = {0, 0, 0}; ///< the labframe location of constraint
    double stress[9] = {0, 0, 0, 0, 0, 0, 0, 0, 0};
    ///< stress 3x3 matrix (row-major) for unit constraint force gamma

    /**
     * @brief Construct a new empty collision block
     *
     */
    ConstraintBlock() = default;

    /**
     * @brief Construct a new ConstraintBlock object
     *
     * @param id_
     * @param delta_ current value of the constraint function
     * @param gamma_
     * @param gidI_
     * @param gidJ_
     * @param globalIndexI_
     * @param globalIndexJ_
     * @param unscaledForceComI_
     * @param unscaledForceComJ_
     * @param unscaledTorqueComI_
     * @param unscaledTorqueComJ_
     * @param labI_
     * @param labJ_
     * @param oneSide_ flag for one side constraint
     * @param invKappa_ kappa of bilateral constraint
     */
    ConstraintBlock(double delta_, double gamma_, int gidI_, int gidJ_, int globalIndexI_, int globalIndexJ_,
                    const double unscaledForceComI_[3], const double unscaledForceComJ_[3], const double unscaledTorqueComI_[3], const double unscaledTorqueComJ_[3],
                    const double labI_[3], const double labJ_[3], 
                    bool oneSide_, int id_, double invKappa_)
        : delta(delta_), gamma(gamma_), gidI(gidI_), gidJ(gidJ_), globalIndexI(globalIndexI_),
          globalIndexJ(globalIndexJ_), oneSide(oneSide_), id(id_), invKappa(invKappa_) {
        for (int d = 0; d < 3; d++) {
            unscaledForceComI[d] = unscaledForceComI_[d];
            unscaledForceComJ[d] = unscaledForceComJ_[d];
            unscaledTorqueComI[d] = unscaledTorqueComI_[d];
            unscaledTorqueComJ[d] = unscaledTorqueComJ_[d];
            labI[d] = labI_[d];
            labJ[d] = labJ_[d];
        }
        std::fill(stress, stress + 9, 0);
    }

    void setStress(const Emat3 &stress_) {
        for (int i = 0; i < 3; i++) {
            for (int j = 0; j < 3; j++) {
                stress[i * 3 + j] = stress_(i, j);
            }
        }
    }

    void setStress(const double *stress_) {
        for (int i = 0; i < 9; i++) {
            stress[i] = stress_[i];
        }
    }

    const double *getStress() const { return stress; }

    void getStress(Emat3 &stress_) const {
        for (int i = 0; i < 3; i++) {
            for (int j = 0; j < 3; j++) {
                stress_(i, j) = stress[i * 3 + j];
            }
        }
    }

    void reverseIJ() {
        std::swap(gidI, gidJ);
        std::swap(globalIndexI, globalIndexJ);
        for (int k = 0; k < 3; k++) {
            std::swap(unscaledForceComI[k], unscaledForceComJ[k]);
            std::swap(unscaledTorqueComI[k], unscaledTorqueComJ[k]);
            std::swap(labI[k], labJ[k]);
        }
    }
};

static_assert(std::is_trivially_copyable<ConstraintBlock>::value, "");
static_assert(std::is_default_constructible<ConstraintBlock>::value, "");

using ConstraintBlockQue = std::vector<ConstraintBlock>;     ///< a vector contains blocks collected by one thread
using ConstraintBlockPool = std::vector<ConstraintBlockQue>; ///< a pool contains vectors on different threads

#endif